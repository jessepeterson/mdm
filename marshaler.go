// generated by go:generate, DO NOT EDIT

package mdm

import (
	"encoding/json"
	"fmt"
)

func (c *Command) MarshalPlist() (interface{}, error) {
	switch c.RequestType {
	case "ProfileList",
		"ProvisioningProfileList",
		"CertificateList",
		"SecurityInfo",
		"StopMirroring",
		"ClearRestrictionsPassword",
		"UserList",
		"LogOutUser",
		"DisableLostMode",
		"DeviceLocation",
		"ManagedMediaList",
		"OSUpdateStatus",
		"DeviceConfigured",
		"AvailableOSUpdates",
		"Restrictions",
		"ShutDownDevice",
		"RestartDevice":
		return &struct {
			RequestType string
		}{
			RequestType: c.RequestType,
		}, nil

	case "DeviceInformation":
		return &struct {
			RequestType string
			DeviceInformation
		}{
			RequestType:       c.RequestType,
			DeviceInformation: c.DeviceInformation,
		}, nil

	case "InstallApplication":
		return &struct {
			RequestType string
			InstallApplication
		}{
			RequestType:        c.RequestType,
			InstallApplication: c.InstallApplication,
		}, nil

	case "AccountConfiguration":
		return &struct {
			RequestType string
			AccountConfiguration
		}{
			RequestType:          c.RequestType,
			AccountConfiguration: c.AccountConfiguration,
		}, nil

	case "ScheduleOSUpdateScan":
		return &struct {
			RequestType string
			ScheduleOSUpdateScan
		}{
			RequestType:          c.RequestType,
			ScheduleOSUpdateScan: c.ScheduleOSUpdateScan,
		}, nil

	case "ScheduleOSUpdate":
		return &struct {
			RequestType string
			ScheduleOSUpdate
		}{
			RequestType:      c.RequestType,
			ScheduleOSUpdate: c.ScheduleOSUpdate,
		}, nil

	case "InstallProfile":
		return &struct {
			RequestType string
			InstallProfile
		}{
			RequestType:    c.RequestType,
			InstallProfile: c.InstallProfile,
		}, nil

	case "RemoveProfile":
		return &struct {
			RequestType string
			RemoveProfile
		}{
			RequestType:   c.RequestType,
			RemoveProfile: c.RemoveProfile,
		}, nil

	case "InstallProvisioningProfile":
		return &struct {
			RequestType string
			InstallProvisioningProfile
		}{
			RequestType:                c.RequestType,
			InstallProvisioningProfile: c.InstallProvisioningProfile,
		}, nil

	case "RemoveProvisioningProfile":
		return &struct {
			RequestType string
			RemoveProvisioningProfile
		}{
			RequestType:               c.RequestType,
			RemoveProvisioningProfile: c.RemoveProvisioningProfile,
		}, nil

	case "InstalledApplicationList":
		return &struct {
			RequestType string
			InstalledApplicationList
		}{
			RequestType:              c.RequestType,
			InstalledApplicationList: c.InstalledApplicationList,
		}, nil

	case "DeviceLock":
		return &struct {
			RequestType string
			DeviceLock
		}{
			RequestType: c.RequestType,
			DeviceLock:  c.DeviceLock,
		}, nil

	case "ClearPasscode":
		return &struct {
			RequestType string
			ClearPasscode
		}{
			RequestType:   c.RequestType,
			ClearPasscode: c.ClearPasscode,
		}, nil

	case "EraseDevice":
		return &struct {
			RequestType string
			EraseDevice
		}{
			RequestType: c.RequestType,
			EraseDevice: c.EraseDevice,
		}, nil

	case "RequestMirroring":
		return &struct {
			RequestType string
			RequestMirroring
		}{
			RequestType:      c.RequestType,
			RequestMirroring: c.RequestMirroring,
		}, nil

	case "DeleteUser":
		return &struct {
			RequestType string
			DeleteUser
		}{
			RequestType: c.RequestType,
			DeleteUser:  c.DeleteUser,
		}, nil

	case "EnableLostMode":
		return &struct {
			RequestType string
			EnableLostMode
		}{
			RequestType:    c.RequestType,
			EnableLostMode: c.EnableLostMode,
		}, nil

	case "ApplyRedemptionCode":
		return &struct {
			RequestType string
			ApplyRedemptionCode
		}{
			RequestType:         c.RequestType,
			ApplyRedemptionCode: c.ApplyRedemptionCode,
		}, nil

	case "InstallMedia":
		return &struct {
			RequestType string
			InstallMedia
		}{
			RequestType:  c.RequestType,
			InstallMedia: c.InstallMedia,
		}, nil

	case "RemoveMedia":
		return &struct {
			RequestType string
			RemoveMedia
		}{
			RequestType: c.RequestType,
			RemoveMedia: c.RemoveMedia,
		}, nil

	case "Settings":
		return &struct {
			RequestType string
			Settings
		}{
			RequestType: c.RequestType,
			Settings:    c.Settings,
		}, nil

	default:
		return nil, fmt.Errorf("unknown request type: %s", c.RequestType)
	}
}

func (c *CommandRequest) UnmarshalJSON(d []byte) error {
	var j struct {
		RequestType string `json:"request_type"`
	}
	if err := json.Unmarshal(d, &j); err != nil {
		return err
	}
	switch j.RequestType {
	case "ProfileList",
		"ProvisioningProfileList",
		"CertificateList",
		"SecurityInfo",
		"StopMirroring",
		"ClearRestrictionsPassword",
		"LogOutUser",
		"DisableLostMode",
		"DeviceLocation",
		"ManagedMediaList",
		"OSUpdateStatus",
		"DeviceConfigured",
		"AvailableOSUpdates",
		"Restrictions",
		"UserList",
		"ShutDownDevice",
		"RestartDevice":
		var x struct {
			RequestType string `json:"request_type"`
			UDID        string `json:"udid"`
			CustomUUID  string `json:"custom_uuid"`
		}
		if err := json.Unmarshal(d, &x); err != nil {
			return err
		}
		c.RequestType = x.RequestType
		c.UDID = x.UDID
		c.CustomUUID = x.CustomUUID
		return nil

	case "DeviceInformation":
		var x struct {
			RequestType string `json:"request_type"`
			UDID        string `json:"udid"`
			CustomUUID  string `json:"custom_uuid"`
			DeviceInformation
		}
		if err := json.Unmarshal(d, &x); err != nil {
			return err
		}
		c.RequestType = x.RequestType
		c.UDID = x.UDID
		c.CustomUUID = x.CustomUUID
		c.DeviceInformation = x.DeviceInformation
		return nil

	case "InstallApplication":
		var x struct {
			RequestType string `json:"request_type"`
			UDID        string `json:"udid"`
			CustomUUID  string `json:"custom_uuid"`
			InstallApplication
		}
		if err := json.Unmarshal(d, &x); err != nil {
			return err
		}
		c.RequestType = x.RequestType
		c.UDID = x.UDID
		c.CustomUUID = x.CustomUUID
		c.InstallApplication = x.InstallApplication
		return nil

	case "AccountConfiguration":
		var x struct {
			RequestType string `json:"request_type"`
			UDID        string `json:"udid"`
			CustomUUID  string `json:"custom_uuid"`
			AccountConfiguration
		}
		if err := json.Unmarshal(d, &x); err != nil {
			return err
		}
		c.RequestType = x.RequestType
		c.UDID = x.UDID
		c.CustomUUID = x.CustomUUID
		c.AccountConfiguration = x.AccountConfiguration
		return nil

	case "ScheduleOSUpdateScan":
		var x struct {
			RequestType string `json:"request_type"`
			UDID        string `json:"udid"`
			CustomUUID  string `json:"custom_uuid"`
			ScheduleOSUpdateScan
		}
		if err := json.Unmarshal(d, &x); err != nil {
			return err
		}
		c.RequestType = x.RequestType
		c.UDID = x.UDID
		c.CustomUUID = x.CustomUUID
		c.ScheduleOSUpdateScan = x.ScheduleOSUpdateScan
		return nil

	case "ScheduleOSUpdate":
		var x struct {
			RequestType string `json:"request_type"`
			UDID        string `json:"udid"`
			CustomUUID  string `json:"custom_uuid"`
			ScheduleOSUpdate
		}
		if err := json.Unmarshal(d, &x); err != nil {
			return err
		}
		c.RequestType = x.RequestType
		c.UDID = x.UDID
		c.CustomUUID = x.CustomUUID
		c.ScheduleOSUpdate = x.ScheduleOSUpdate
		return nil

	case "InstallProfile":
		var x struct {
			RequestType string `json:"request_type"`
			UDID        string `json:"udid"`
			CustomUUID  string `json:"custom_uuid"`
			InstallProfile
		}
		if err := json.Unmarshal(d, &x); err != nil {
			return err
		}
		c.RequestType = x.RequestType
		c.UDID = x.UDID
		c.CustomUUID = x.CustomUUID
		c.InstallProfile = x.InstallProfile
		return nil

	case "RemoveProfile":
		var x struct {
			RequestType string `json:"request_type"`
			UDID        string `json:"udid"`
			CustomUUID  string `json:"custom_uuid"`
			RemoveProfile
		}
		if err := json.Unmarshal(d, &x); err != nil {
			return err
		}
		c.RequestType = x.RequestType
		c.UDID = x.UDID
		c.CustomUUID = x.CustomUUID
		c.RemoveProfile = x.RemoveProfile
		return nil

	case "InstallProvisioningProfile":
		var x struct {
			RequestType string `json:"request_type"`
			UDID        string `json:"udid"`
			CustomUUID  string `json:"custom_uuid"`
			InstallProvisioningProfile
		}
		if err := json.Unmarshal(d, &x); err != nil {
			return err
		}
		c.RequestType = x.RequestType
		c.UDID = x.UDID
		c.CustomUUID = x.CustomUUID
		c.InstallProvisioningProfile = x.InstallProvisioningProfile
		return nil

	case "RemoveProvisioningProfile":
		var x struct {
			RequestType string `json:"request_type"`
			UDID        string `json:"udid"`
			CustomUUID  string `json:"custom_uuid"`
			RemoveProvisioningProfile
		}
		if err := json.Unmarshal(d, &x); err != nil {
			return err
		}
		c.RequestType = x.RequestType
		c.UDID = x.UDID
		c.CustomUUID = x.CustomUUID
		c.RemoveProvisioningProfile = x.RemoveProvisioningProfile
		return nil

	case "InstalledApplicationList":
		var x struct {
			RequestType string `json:"request_type"`
			UDID        string `json:"udid"`
			CustomUUID  string `json:"custom_uuid"`
			InstalledApplicationList
		}
		if err := json.Unmarshal(d, &x); err != nil {
			return err
		}
		c.RequestType = x.RequestType
		c.UDID = x.UDID
		c.CustomUUID = x.CustomUUID
		c.InstalledApplicationList = x.InstalledApplicationList
		return nil

	case "DeviceLock":
		var x struct {
			RequestType string `json:"request_type"`
			UDID        string `json:"udid"`
			CustomUUID  string `json:"custom_uuid"`
			DeviceLock
		}
		if err := json.Unmarshal(d, &x); err != nil {
			return err
		}
		c.RequestType = x.RequestType
		c.UDID = x.UDID
		c.CustomUUID = x.CustomUUID
		c.DeviceLock = x.DeviceLock
		return nil

	case "ClearPasscode":
		var x struct {
			RequestType string `json:"request_type"`
			UDID        string `json:"udid"`
			CustomUUID  string `json:"custom_uuid"`
			ClearPasscode
		}
		if err := json.Unmarshal(d, &x); err != nil {
			return err
		}
		c.RequestType = x.RequestType
		c.UDID = x.UDID
		c.CustomUUID = x.CustomUUID
		c.ClearPasscode = x.ClearPasscode
		return nil

	case "EraseDevice":
		var x struct {
			RequestType string `json:"request_type"`
			UDID        string `json:"udid"`
			CustomUUID  string `json:"custom_uuid"`
			EraseDevice
		}
		if err := json.Unmarshal(d, &x); err != nil {
			return err
		}
		c.RequestType = x.RequestType
		c.UDID = x.UDID
		c.CustomUUID = x.CustomUUID
		c.EraseDevice = x.EraseDevice
		return nil

	case "RequestMirroring":
		var x struct {
			RequestType string `json:"request_type"`
			UDID        string `json:"udid"`
			CustomUUID  string `json:"custom_uuid"`
			RequestMirroring
		}
		if err := json.Unmarshal(d, &x); err != nil {
			return err
		}
		c.RequestType = x.RequestType
		c.UDID = x.UDID
		c.CustomUUID = x.CustomUUID
		c.RequestMirroring = x.RequestMirroring
		return nil

	case "DeleteUser":
		var x struct {
			RequestType string `json:"request_type"`
			UDID        string `json:"udid"`
			CustomUUID  string `json:"custom_uuid"`
			DeleteUser
		}
		if err := json.Unmarshal(d, &x); err != nil {
			return err
		}
		c.RequestType = x.RequestType
		c.UDID = x.UDID
		c.CustomUUID = x.CustomUUID
		c.DeleteUser = x.DeleteUser
		return nil

	case "EnableLostMode":
		var x struct {
			RequestType string `json:"request_type"`
			UDID        string `json:"udid"`
			CustomUUID  string `json:"custom_uuid"`
			EnableLostMode
		}
		if err := json.Unmarshal(d, &x); err != nil {
			return err
		}
		c.RequestType = x.RequestType
		c.UDID = x.UDID
		c.CustomUUID = x.CustomUUID
		c.EnableLostMode = x.EnableLostMode
		return nil

	case "ApplyRedemptionCode":
		var x struct {
			RequestType string `json:"request_type"`
			UDID        string `json:"udid"`
			CustomUUID  string `json:"custom_uuid"`
			ApplyRedemptionCode
		}
		if err := json.Unmarshal(d, &x); err != nil {
			return err
		}
		c.RequestType = x.RequestType
		c.UDID = x.UDID
		c.CustomUUID = x.CustomUUID
		c.ApplyRedemptionCode = x.ApplyRedemptionCode
		return nil

	case "InstallMedia":
		var x struct {
			RequestType string `json:"request_type"`
			UDID        string `json:"udid"`
			CustomUUID  string `json:"custom_uuid"`
			InstallMedia
		}
		if err := json.Unmarshal(d, &x); err != nil {
			return err
		}
		c.RequestType = x.RequestType
		c.UDID = x.UDID
		c.CustomUUID = x.CustomUUID
		c.InstallMedia = x.InstallMedia
		return nil

	case "RemoveMedia":
		var x struct {
			RequestType string `json:"request_type"`
			UDID        string `json:"udid"`
			CustomUUID  string `json:"custom_uuid"`
			RemoveMedia
		}
		if err := json.Unmarshal(d, &x); err != nil {
			return err
		}
		c.RequestType = x.RequestType
		c.UDID = x.UDID
		c.CustomUUID = x.CustomUUID
		c.RemoveMedia = x.RemoveMedia
		return nil

	case "Settings":
		var x struct {
			RequestType string `json:"request_type"`
			UDID        string `json:"udid"`
			CustomUUID  string `json:"custom_uuid"`
			Settings
		}
		if err := json.Unmarshal(d, &x); err != nil {
			return err
		}
		c.RequestType = x.RequestType
		c.UDID = x.UDID
		c.CustomUUID = x.CustomUUID
		c.Settings = x.Settings
		return nil

	default:
		return fmt.Errorf("mdm: unknown request_type %s", j.RequestType)
	}
}
